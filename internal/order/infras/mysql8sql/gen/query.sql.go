// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package gen

import (
	"context"
	"database/sql"
)

const delOrderById = `-- name: DelOrderById :execrows
update xf_order
set delete_is =?
where order_id = ?
`

type DelOrderByIdParams struct {
	DeleteIs sql.NullInt32 `json:"delete_is"`
	OrderID  string        `json:"order_id"`
}

func (q *Queries) DelOrderById(ctx context.Context, arg DelOrderByIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, delOrderById, arg.DeleteIs, arg.OrderID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getOrderById = `-- name: GetOrderById :one
select order_id, price, order_type, order_status, delete_is, create_time, update_time
from xf_order
where order_id = ?
`

func (q *Queries) GetOrderById(ctx context.Context, orderID string) (XfOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, orderID)
	var i XfOrder
	err := row.Scan(
		&i.OrderID,
		&i.Price,
		&i.OrderType,
		&i.OrderStatus,
		&i.DeleteIs,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}
